// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Scanner.flex

/* Mixture of jflex examples: simple.flex, minijava.flex and java.flex (with modifications) */


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\3\0\1\5\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\12\17\1\20\1\13"+
    "\1\21\1\22\1\23\1\20\1\0\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\35\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\13"+
    "\1\0\1\13\1\5\1\55\1\0\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\35\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\13"+
    "\1\56\1\13\1\20\6\0\1\3\252\0\2\57\115\0"+
    "\1\60\u01a8\0\2\3\u0100\0\1\61\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\2\4\1\5\2\4"+
    "\1\5\1\4\1\6\3\4\21\7\1\4\2\1\1\4"+
    "\1\0\1\4\1\0\1\10\1\11\1\0\1\2\1\4"+
    "\2\0\11\7\1\12\10\7\1\0\1\7\1\12\23\7"+
    "\1\12\7\0\1\13\1\14\1\15\2\0\1\13\1\14"+
    "\1\7\1\0\4\7\1\0\6\7\1\16\4\7\1\0"+
    "\3\7\1\12\1\0\6\7\1\0\7\7\1\0\3\7"+
    "\1\0\4\7\1\0\1\7\2\0\1\12\10\0\1\2"+
    "\1\7\1\0\6\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\0\1\17\1\7"+
    "\1\0\2\7\1\0\3\7\2\0\3\7\1\20\1\7"+
    "\5\0\1\7\1\0\2\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\20\2\12\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\2\0\1\7\1\12"+
    "\1\7\4\0\1\7\1\0\1\7\1\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\0\2\7\1\0\2\7\4\0"+
    "\1\7\2\0\3\7\1\0\2\7\1\0\2\7\4\0"+
    "\1\16\1\0\2\7\1\0\1\7\3\0\1\7\1\0"+
    "\1\7\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\62\0\144\0\226\0\310\0\62"+
    "\0\372\0\u012c\0\u015e\0\u0190\0\u01c2\0\62\0\u01f4\0\u0226"+
    "\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6"+
    "\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546"+
    "\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u015e\0\u0672\0\u06a4"+
    "\0\u06d6\0\u015e\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u03b6\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\62"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe"+
    "\0\u1130\0\u06a4\0\u1162\0\u1194\0\62\0\62\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u03b6\0\u1450\0\u1482\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996"+
    "\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1ce8\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14"+
    "\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4"+
    "\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134"+
    "\0\u03b6\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292"+
    "\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u03b6\0\u23f0"+
    "\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580"+
    "\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\62"+
    "\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e"+
    "\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe"+
    "\0\u2a30\0\u1964\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c"+
    "\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec"+
    "\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c"+
    "\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c"+
    "\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c"+
    "\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\62\0\u32c8\0\u32fa"+
    "\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a"+
    "\0\u34bc\0\u34ee\0\u3520";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\2\10\1\6"+
    "\1\11\1\10\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\6\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\30\1\32\1\30\1\33\1\30"+
    "\1\34\1\35\1\36\1\37\1\30\1\40\1\41\3\30"+
    "\1\2\1\42\1\43\1\44\1\2\64\0\1\3\101\0"+
    "\1\16\45\0\1\16\13\0\1\16\51\0\1\45\2\0"+
    "\1\46\1\0\1\15\2\0\1\16\53\0\1\47\1\50"+
    "\1\0\1\51\2\0\1\16\56\0\1\52\53\0\1\53"+
    "\4\0\1\54\3\0\1\16\54\0\1\52\1\0\1\15"+
    "\63\0\1\6\1\16\61\0\1\16\1\55\50\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\1\30\1\60\30\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\16\30"+
    "\1\61\1\30\1\62\6\30\1\63\2\30\16\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\1\64\6\30\1\65"+
    "\3\30\1\66\2\30\1\67\13\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\4\30\1\70\11\30\1\71"+
    "\7\30\1\72\3\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\13\30\1\73\2\30\1\74\7\30\1\75"+
    "\3\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\1\76\7\30\1\77\2\30\1\100\2\30\1\101\13\30"+
    "\1\0\1\102\14\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\16\30\1\103\13\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\32\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\5\30\1\104\6\30\1\105\1\106"+
    "\14\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\16\30\1\107\13\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\1\110\3\30\1\111\16\30\1\112\6\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\1\113"+
    "\17\30\1\114\2\30\1\115\6\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\4\30\1\116\25\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\7\30\1\117"+
    "\12\30\1\120\1\121\1\30\1\122\1\30\1\123\2\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\7\30"+
    "\1\124\10\30\1\125\11\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\16\30\1\126\13\30\16\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\7\30\1\127\22\30"+
    "\26\0\1\16\33\0\1\16\34\0\1\130\6\0\1\131"+
    "\1\132\53\0\1\133\12\0\1\134\1\135\1\0\1\136"+
    "\1\0\1\137\32\0\31\140\31\0\31\141\24\0\1\142"+
    "\57\0\1\142\1\0\1\51\42\0\11\143\1\144\50\143"+
    "\2\54\1\3\1\54\1\5\55\54\22\0\1\16\1\6"+
    "\50\0\1\145\63\0\1\146\57\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\21\30\1\147\10\30\2\0\1\150"+
    "\13\0\1\56\1\0\1\57\2\0\1\30\4\0\16\30"+
    "\1\151\13\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\4\30\1\152\25\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\22\30\1\153\7\30\16\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\21\30\1\153\1\154"+
    "\7\30\2\0\1\155\13\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\1\101\31\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\1\156\31\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\14\30\1\157\1\160\14\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\5\30"+
    "\1\161\24\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\23\30\1\162\6\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\22\30\1\163\7\30\16\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\21\30\1\153\10\30"+
    "\2\0\1\155\13\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\5\30\1\164\24\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\22\30\1\165\7\30\16\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\13\30\1\166\16\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\15\30"+
    "\1\167\14\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\16\30\1\170\13\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\20\30\1\104\11\30\45\0\1\171"+
    "\32\0\1\56\1\0\1\57\2\0\1\30\4\0\22\30"+
    "\1\172\7\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\17\30\1\173\12\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\21\30\1\174\1\175\7\30\2\0"+
    "\1\176\13\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\15\30\1\177\14\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\22\30\1\200\7\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\25\30\1\104\4\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\13\30\1\201"+
    "\16\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\2\30\1\202\27\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\10\30\1\203\5\30\1\204\13\30\1\0"+
    "\1\205\14\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\1\30\1\206\30\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\22\30\1\207\7\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\16\30\1\210\13\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\1\211\17\30"+
    "\1\212\11\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\17\30\1\213\12\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\10\30\1\214\21\30\1\0\1\215"+
    "\14\0\1\56\1\0\1\57\2\0\1\30\4\0\15\30"+
    "\1\216\14\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\10\30\1\217\7\30\1\220\11\30\1\0\1\221"+
    "\14\0\1\56\1\0\1\57\2\0\1\30\4\0\1\222"+
    "\22\30\1\223\3\30\1\104\2\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\10\30\1\224\2\30\1\225"+
    "\16\30\1\0\1\226\14\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\10\30\1\227\21\30\1\0\1\230\45\0"+
    "\1\231\63\0\1\176\1\232\11\0\1\176\43\0\1\233"+
    "\43\0\1\234\17\0\1\235\60\0\1\236\52\0\1\215"+
    "\22\0\1\215\43\0\1\237\37\0\1\140\4\0\32\140"+
    "\23\0\1\141\4\0\32\141\4\0\11\143\1\240\50\143"+
    "\11\241\1\242\4\241\1\243\43\241\12\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\22\30\1\244\7\30\52\0"+
    "\1\245\25\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\13\30\1\246\16\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\1\247\31\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\4\30\1\104\25\30\16\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\2\30\1\250\27\30"+
    "\34\0\1\130\43\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\21\30\1\217\10\30\2\0\1\221\13\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\17\30\1\251\12\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\21\30"+
    "\1\252\1\253\7\30\2\0\1\254\13\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\1\255\31\30\16\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\1\30\1\227\30\30"+
    "\16\0\1\56\1\0\1\57\1\256\1\0\1\30\4\0"+
    "\32\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\4\30\1\257\25\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\21\30\1\223\10\30\2\0\1\260\13\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\1\261\31\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\1\252"+
    "\31\30\30\0\1\262\47\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\16\30\1\104\13\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\13\30\1\263\2\30\1\210"+
    "\13\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\22\30\1\264\7\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\4\30\1\265\25\30\52\0\1\266\25\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\6\30\1\104"+
    "\23\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\10\30\1\267\21\30\1\0\1\270\14\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\13\30\1\271\16\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\12\30\1\272"+
    "\17\30\3\0\1\273\12\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\24\30\1\274\5\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\22\30\1\275\7\30\54\0"+
    "\1\276\23\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\13\30\1\277\16\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\23\30\1\300\6\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\20\30\1\252\11\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\22\30\1\277"+
    "\7\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\10\30\1\301\21\30\1\0\1\302\14\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\4\30\1\101\25\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\22\30\1\154"+
    "\7\30\52\0\1\303\25\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\2\30\1\304\27\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\21\30\1\104\10\30\2\0"+
    "\1\130\13\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\16\30\1\305\13\30\51\0\1\130\12\0\1\130\13\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\15\30\1\306"+
    "\14\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\4\30\1\307\25\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\3\30\1\104\26\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\1\310\31\30\33\0\1\130"+
    "\44\0\1\56\1\0\1\57\2\0\1\30\4\0\13\30"+
    "\1\153\16\30\43\0\1\155\61\0\1\311\2\0\1\233"+
    "\47\0\1\312\75\0\1\254\63\0\1\313\47\0\1\302"+
    "\22\0\1\302\32\0\1\314\57\0\1\315\51\0\1\3"+
    "\43\0\11\241\1\242\61\241\1\242\4\241\1\3\43\241"+
    "\12\0\1\56\1\0\1\57\2\0\1\30\4\0\20\30"+
    "\1\316\11\30\50\0\1\317\27\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\4\30\1\320\25\30\16\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\12\30\1\104\17\30"+
    "\3\0\1\130\12\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\7\30\1\104\22\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\10\30\1\321\21\30\1\0\1\322"+
    "\14\0\1\56\1\0\1\57\2\0\1\30\4\0\22\30"+
    "\1\104\7\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\10\30\1\323\21\30\1\0\1\324\50\0\1\130"+
    "\25\0\1\56\1\0\1\57\2\0\1\30\4\0\23\30"+
    "\1\325\6\30\40\0\1\326\22\0\1\326\14\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\15\30\1\327\14\30"+
    "\34\0\1\330\43\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\13\30\1\331\16\30\43\0\1\332\34\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\4\30\1\333\25\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\1\334"+
    "\31\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\20\30\1\335\11\30\30\0\1\336\47\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\24\30\1\153\5\30\54\0"+
    "\1\155\23\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\1\337\31\30\30\0\1\340\47\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\1\63\31\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\4\30\1\341\25\30\30\0"+
    "\1\342\47\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\10\30\1\343\21\30\1\0\1\344\14\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\20\30\1\345\11\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\2\30\1\346"+
    "\27\30\32\0\1\347\61\0\1\350\45\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\7\30\1\351\22\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\25\30\1\352"+
    "\4\30\16\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\21\30\1\353\10\30\2\0\1\354\13\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\22\30\1\127\7\30\34\0"+
    "\1\355\75\0\1\356\51\0\1\344\22\0\1\344\46\0"+
    "\1\130\50\0\1\357\40\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\1\360\31\30\30\0\1\361\47\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\1\345\31\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\13\30\1\362"+
    "\16\30\43\0\1\363\34\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\15\30\1\364\14\30\45\0\1\365\32\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\13\30\1\252"+
    "\16\30\45\0\1\366\32\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\3\30\1\217\26\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\13\30\1\367\16\30\43\0"+
    "\1\370\34\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\14\30\1\371\15\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\15\30\1\372\14\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\5\30\1\373\24\30\45\0"+
    "\1\374\32\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\6\30\1\153\23\30\36\0\1\155\41\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\2\30\1\375\27\30\52\0"+
    "\1\155\25\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\2\30\1\104\27\30\32\0\1\130\45\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\15\30\1\104\14\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\22\30\1\376"+
    "\7\30\52\0\1\377\46\0\1\130\40\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\20\30\1\u0100\11\30\16\0"+
    "\1\56\1\0\1\57\2\0\1\30\4\0\10\30\1\u0101"+
    "\21\30\1\0\1\u0102\36\0\1\u0102\22\0\1\u0102\42\0"+
    "\1\u0103\52\0\1\u0104\74\0\1\u0105\27\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\2\30\1\252\27\30\32\0"+
    "\1\254\45\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\4\30\1\u0106\25\30\34\0\1\u0107\43\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\23\30\1\153\6\30\53\0"+
    "\1\155\46\0\1\u0108\22\0\1\u0108\14\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\27\30\1\104\2\30\57\0"+
    "\1\130\20\0\1\56\1\0\1\57\2\0\1\30\4\0"+
    "\4\30\1\u0109\25\30\16\0\1\56\1\0\1\57\2\0"+
    "\1\30\4\0\2\30\1\u010a\27\30\16\0\1\56\1\0"+
    "\1\57\2\0\1\30\4\0\1\u010b\31\30\32\0\1\u010c"+
    "\45\0\1\56\1\0\1\57\2\0\1\30\4\0\22\30"+
    "\1\u010d\7\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\5\30\1\u010e\24\30\35\0\1\u010f\42\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\16\30\1\u0110\13\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\4\30"+
    "\1\u0111\25\30\34\0\1\u0112\61\0\1\u0113\55\0\1\u0114"+
    "\77\0\1\u0115\31\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\20\30\1\164\11\30\50\0\1\u0116\63\0\1\u0117"+
    "\25\0\1\56\1\0\1\57\2\0\1\30\4\0\15\30"+
    "\1\u0118\14\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\4\30\1\u0119\25\30\16\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\2\30\1\153\27\30\34\0\1\u011a"+
    "\43\0\1\56\1\0\1\57\2\0\1\30\4\0\4\30"+
    "\1\224\25\30\16\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\17\30\1\104\12\30\47\0\1\130\30\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\15\30\1\u011b\14\30"+
    "\16\0\1\56\1\0\1\57\2\0\1\30\4\0\15\30"+
    "\1\252\14\30\45\0\1\254\61\0\1\u011c\46\0\1\155"+
    "\74\0\1\u011d\27\0\1\u011e\64\0\1\56\1\0\1\57"+
    "\2\0\1\30\4\0\22\30\1\217\7\30\16\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\16\30\1\u011f\13\30"+
    "\46\0\1\u0120\31\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\10\30\1\u0121\21\30\1\0\1\u0122\50\0\1\221"+
    "\47\0\1\u0122\22\0\1\u0122\12\0\1\u0116\63\0\1\56"+
    "\1\0\1\57\2\0\1\30\4\0\5\30\1\104\24\30"+
    "\35\0\1\130\42\0\1\56\1\0\1\57\2\0\1\30"+
    "\4\0\30\30\1\u010d\1\30\60\0\1\u0123\35\0\1\226"+
    "\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\1\11\5\1\1\11\27\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\2\0\22\1\1\0"+
    "\25\1\1\11\7\0\3\1\2\0\2\11\1\1\1\0"+
    "\4\1\1\0\13\1\1\0\4\1\1\0\6\1\1\0"+
    "\7\1\1\0\3\1\1\0\4\1\1\0\1\1\2\0"+
    "\1\1\10\0\2\1\1\0\6\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\2\0\5\1\5\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\5\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\2\0\3\1\4\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\2\1\4\0\1\1\2\0\3\1\1\0"+
    "\2\1\1\0\2\1\4\0\1\11\1\0\2\1\1\0"+
    "\1\1\3\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { System.out.println(\"     illegal character\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     illegal character" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 17: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { /* ignore */ }");
            { /* ignore */
            }
            // fall through
          case 18: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [2147483647] { System.out.print(yytext()); }");
            { System.out.print(yytext());
            }
            // fall through
          case 19: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { System.out.println(\"     operator\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     operator" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 20: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { System.out.println(\"     separator\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     separator" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 21: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { System.out.println(\"     integer\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     integer" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 22: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { System.out.println(\"     identifier\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     identifier" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 23: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { System.out.println(\"     negative integer\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     negative integer" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 24: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { System.out.println(\"     float\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     float" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 25: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { System.out.println(\"     keyword\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     keyword" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 26: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { System.out.println(\"     incremental statement\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     incremental statement" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 27: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { System.out.println(\"     decremental statement\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     decremental statement" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 28: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { System.out.println(\"     negative float\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     negative float" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 29: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { System.out.println(\"     reserved\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     reserved" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 30: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { System.out.println(\"     null literal\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     null literal" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 31: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { System.out.println(\"     boolean literal\" + \" ~~~ \" + yytext() + \" ~~~ line:\" + yyline + \" column:\" + yycolumn); }");
            { System.out.println("     boolean literal" + " ~~~ " + yytext() + " ~~~ line:" + yyline + " column:" + yycolumn);
            }
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
