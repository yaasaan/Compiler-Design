
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\004\006" +
    "\000\002\005\005\000\002\006\006\000\002\006\004\000" +
    "\002\006\002\000\002\007\005\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\005\000\002\020\013" +
    "\000\002\021\003\000\002\021\002\000\002\022\003\000" +
    "\002\023\003\000\002\023\002\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\004\000\002\026" +
    "\006\000\002\027\003\000\002\027\002\000\002\030\003" +
    "\000\002\030\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\005\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\034\005\000\002\035" +
    "\005\000\002\017\006\000\002\016\003\000\002\016\003" +
    "\000\002\011\013\000\002\011\011\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\036\007\000\002\013" +
    "\005\000\002\013\005\000\002\014\003\000\002\014\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\010\002\ufffe\004\ufffe\005\ufffe\001\002\000" +
    "\004\002\157\001\002\000\010\002\000\004\010\005\007" +
    "\001\002\000\010\002\uffff\004\uffff\005\uffff\001\002\000" +
    "\004\034\154\001\002\000\004\034\011\001\002\000\004" +
    "\015\012\001\002\000\010\004\146\016\ufff8\022\ufff8\001" +
    "\002\000\016\004\014\006\027\010\022\012\031\017\032" +
    "\034\020\001\002\000\004\034\uffd6\001\002\000\016\002" +
    "\ufff1\004\ufff1\005\ufff1\007\ufff1\020\ufff1\021\ufff1\001\002" +
    "\000\006\015\140\023\141\001\002\000\016\002\ufff5\004" +
    "\ufff5\005\ufff5\007\ufff5\020\ufff5\021\ufff5\001\002\000\010" +
    "\015\uffda\023\uffda\034\uffd5\001\002\000\016\002\ufff2\004" +
    "\ufff2\005\ufff2\007\ufff2\020\ufff2\021\ufff2\001\002\000\004" +
    "\015\117\001\002\000\016\002\ufff4\004\ufff4\005\ufff4\007" +
    "\ufff4\020\ufff4\021\ufff4\001\002\000\010\002\ufffc\004\ufffc" +
    "\005\ufffc\001\002\000\006\015\uffdc\023\uffdc\001\002\000" +
    "\006\015\uffdb\023\uffdb\001\002\000\004\015\100\001\002" +
    "\000\004\034\043\001\002\000\004\034\041\001\002\000" +
    "\016\004\014\006\027\010\022\012\031\017\032\034\020" +
    "\001\002\000\016\002\ufff3\004\ufff3\005\ufff3\007\ufff3\020" +
    "\ufff3\021\ufff3\001\002\000\006\020\037\021\036\001\002" +
    "\000\006\020\ufff6\021\ufff6\001\002\000\016\004\014\006" +
    "\027\010\022\012\031\017\032\034\020\001\002\000\016" +
    "\002\ufff0\004\ufff0\005\ufff0\007\ufff0\020\ufff0\021\ufff0\001" +
    "\002\000\006\020\ufff7\021\ufff7\001\002\000\004\021\042" +
    "\001\002\000\016\002\uffd8\004\uffd8\005\uffd8\007\uffd8\020" +
    "\uffd8\021\uffd8\001\002\000\004\024\044\001\002\000\014" +
    "\011\051\013\052\014\053\033\047\034\046\001\002\000" +
    "\032\002\uffd0\004\uffd0\005\uffd0\007\uffd0\016\uffd0\020\uffd0" +
    "\021\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\001" +
    "\002\000\036\002\uffcf\004\uffcf\005\uffcf\007\uffcf\015\uffda" +
    "\016\uffcf\020\uffcf\021\uffcf\023\uffda\025\uffcf\026\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\001\002\000\032\002\uffc9\004\uffc9" +
    "\005\uffc9\007\uffc9\016\uffc9\020\uffc9\021\uffc9\025\uffc9\026" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\001\002\000\032\002\uffd2" +
    "\004\uffd2\005\uffd2\007\uffd2\016\uffd2\020\uffd2\021\uffd2\025" +
    "\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\001\002\000\004" +
    "\034\063\001\002\000\032\002\uffce\004\uffce\005\uffce\007" +
    "\uffce\016\uffce\020\uffce\021\uffce\025\uffce\026\uffce\030\uffce" +
    "\031\uffce\032\uffce\001\002\000\032\002\uffcd\004\uffcd\005" +
    "\uffcd\007\uffcd\016\uffcd\020\uffcd\021\uffcd\025\uffcd\026\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\001\002\000\026\002\uffd7\004" +
    "\uffd7\005\uffd7\007\uffd7\016\uffd7\020\uffd7\021\uffd7\030\057" +
    "\031\060\032\056\001\002\000\032\002\uffd1\004\uffd1\005" +
    "\uffd1\007\uffd1\016\uffd1\020\uffd1\021\uffd1\025\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\001\002\000\014\011\uffc5\013" +
    "\uffc5\014\uffc5\033\uffc5\034\uffc5\001\002\000\014\011\uffc7" +
    "\013\uffc7\014\uffc7\033\uffc7\034\uffc7\001\002\000\014\011" +
    "\uffc6\013\uffc6\014\uffc6\033\uffc6\034\uffc6\001\002\000\014" +
    "\011\051\013\052\014\053\033\047\034\046\001\002\000" +
    "\032\002\uffc8\004\uffc8\005\uffc8\007\uffc8\016\uffc8\020\uffc8" +
    "\021\uffc8\025\uffc8\026\uffc8\030\057\031\060\032\056\001" +
    "\002\000\004\015\064\001\002\000\012\016\uffe3\033\065" +
    "\034\070\035\066\001\002\000\010\016\uffe0\022\uffe0\030" +
    "\uffe0\001\002\000\010\016\uffdf\022\uffdf\030\uffdf\001\002" +
    "\000\010\016\uffe2\022\uffe2\030\075\001\002\000\010\016" +
    "\uffde\022\uffde\030\uffde\001\002\000\004\016\077\001\002" +
    "\000\006\016\uffe4\022\073\001\002\000\010\033\065\034" +
    "\070\035\066\001\002\000\010\016\uffe1\022\uffe1\030\075" +
    "\001\002\000\010\033\065\034\070\035\066\001\002\000" +
    "\010\016\uffdd\022\uffdd\030\uffdd\001\002\000\032\002\uffcc" +
    "\004\uffcc\005\uffcc\007\uffcc\016\uffcc\020\uffcc\021\uffcc\025" +
    "\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\001\002\000\014" +
    "\011\051\013\052\014\053\033\047\034\046\001\002\000" +
    "\004\016\107\001\002\000\014\025\103\026\104\030\057" +
    "\031\060\032\056\001\002\000\014\011\051\013\052\014" +
    "\053\033\047\034\046\001\002\000\014\011\051\013\052" +
    "\014\053\033\047\034\046\001\002\000\014\016\uffca\021" +
    "\uffca\030\057\031\060\032\056\001\002\000\014\016\uffcb" +
    "\021\uffcb\030\057\031\060\032\056\001\002\000\016\004" +
    "\014\006\027\010\022\012\031\017\032\034\020\001\002" +
    "\000\006\007\111\021\112\001\002\000\016\004\014\006" +
    "\027\010\022\012\031\017\032\034\020\001\002\000\004" +
    "\007\113\001\002\000\016\004\014\006\027\010\022\012" +
    "\031\017\032\034\020\001\002\000\004\021\115\001\002" +
    "\000\016\002\uffd4\004\uffd4\005\uffd4\007\uffd4\020\uffd4\021" +
    "\uffd4\001\002\000\016\002\uffd3\004\uffd3\005\uffd3\007\uffd3" +
    "\020\uffd3\021\uffd3\001\002\000\010\004\014\021\uffed\034" +
    "\122\001\002\000\004\021\124\001\002\000\004\021\uffee" +
    "\001\002\000\004\034\uffd5\001\002\000\004\021\uffec\001" +
    "\002\000\014\011\051\013\052\014\053\033\047\034\046" +
    "\001\002\000\004\021\126\001\002\000\010\004\014\016" +
    "\uffea\034\130\001\002\000\004\016\uffe7\001\002\000\012" +
    "\015\uffda\023\uffda\027\137\034\uffd5\001\002\000\004\016" +
    "\uffe9\001\002\000\004\016\135\001\002\000\004\016\uffeb" +
    "\001\002\000\004\016\uffe8\001\002\000\016\004\014\006" +
    "\027\010\022\012\031\017\032\034\020\001\002\000\016" +
    "\002\uffef\004\uffef\005\uffef\007\uffef\020\uffef\021\uffef\001" +
    "\002\000\004\016\uffe6\001\002\000\012\016\uffe3\033\065" +
    "\034\070\035\066\001\002\000\004\034\142\001\002\000" +
    "\006\015\uffd9\023\uffd9\001\002\000\004\016\144\001\002" +
    "\000\032\002\uffe5\004\uffe5\005\uffe5\007\uffe5\016\uffe5\020" +
    "\uffe5\021\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\001\002\000\006\016\151\022\150\001\002\000\004\034" +
    "\147\001\002\000\006\016\ufff9\022\ufff9\001\002\000\004" +
    "\004\152\001\002\000\016\004\ufffb\006\ufffb\010\ufffb\012" +
    "\ufffb\017\ufffb\034\ufffb\001\002\000\004\034\153\001\002" +
    "\000\006\016\ufffa\022\ufffa\001\002\000\004\015\012\001" +
    "\002\000\016\004\014\006\027\010\022\012\031\017\032" +
    "\034\020\001\002\000\010\002\ufffd\004\ufffd\005\ufffd\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\012\001\001\000" +
    "\004\006\144\001\001\000\026\010\023\011\022\016\027" +
    "\017\020\020\016\026\014\032\015\033\024\034\025\035" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\007\033\010\034" +
    "\011\022\016\027\017\020\020\016\026\014\032\015\033" +
    "\024\034\025\035\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\037\011\022\016" +
    "\027\017\020\020\016\026\014\032\015\033\024\034\025" +
    "\035\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\053\014\054\026\044\032\015\033\024\034\025\036" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\061\014\054\026\044\032\015\033\024" +
    "\034\025\036\047\001\001\000\004\015\060\001\001\000" +
    "\002\001\001\000\010\027\070\030\071\031\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\073\001\001\000\002\001\001\000\004\031\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\012\101" +
    "\013\100\014\054\026\044\032\015\033\024\034\025\036" +
    "\047\001\001\000\002\001\001\000\004\015\060\001\001" +
    "\000\020\012\105\014\054\026\044\032\015\033\024\034" +
    "\025\036\047\001\001\000\020\012\104\014\054\026\044" +
    "\032\015\033\024\034\025\036\047\001\001\000\004\015" +
    "\060\001\001\000\004\015\060\001\001\000\026\010\107" +
    "\011\022\016\027\017\020\020\016\026\014\032\015\033" +
    "\024\034\025\035\032\001\001\000\002\001\001\000\026" +
    "\010\115\011\022\016\027\017\020\020\016\026\014\032" +
    "\015\033\024\034\025\035\032\001\001\000\002\001\001" +
    "\000\026\010\113\011\022\016\027\017\020\020\016\026" +
    "\014\032\015\033\024\034\025\035\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\027\017\122\021\117\022\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\101\013\124\014\054\026\044\032\015\033\024" +
    "\034\025\036\047\001\001\000\002\001\001\000\024\016" +
    "\027\017\130\023\131\024\132\025\133\026\126\032\015" +
    "\033\024\034\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\010\135\011\022\016\027\017" +
    "\020\020\016\026\014\032\015\033\024\034\025\035\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\142\030\071\031\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\154\001\001\000\026\010\155\011\022\016\027" +
    "\017\020\020\016\026\014\032\015\033\024\034\025\035" +
    "\032\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Parser(Scanner scan, ComplexSymbolFactory sf) {
        super(scan, sf);
    }
    public static void main(String[] args) throws Exception {
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer scanner = new ScannerBuffer(new Scanner(new BufferedReader(new FileReader(args[0])), csf));
        // start parsing
        Parser parser = new Parser(scanner, csf);
        try {
            parser.parse();
            System.out.println("\nScan and parse finished successfully!");
        } catch (Exception e) {
            if (e.getMessage().equals("lexical")) System.out.println("\nLexical error detected! See above details ￪");
            else System.out.println("\nSyntax error detected! See above details ￪");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // functions ::= functions function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // functions ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function ::= VOID IDENT params stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function ::= INT IDENT params stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // params ::= LPAR param RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // param ::= param COMMA INT IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // param ::= INT IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // param ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmts ::= stmts SEMI stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmts ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= return_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= method_invocation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= BEGIN stmts END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // for_statement ::= FOR LPAR for_init_opt SEMI equality_expression SEMI for_update_opt RPAR stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for_init_opt ::= for_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for_init_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for_init ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // for_update_opt ::= for_update 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_update_opt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // for_update_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_update_opt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // for_update ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_update",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // for_update ::= postdecrement_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_update",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // for_update ::= method_invocation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_update",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // postdecrement_expression ::= IDENT DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postdecrement_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_invocation ::= name LPAR argument_list_opt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_invocation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argument_list_opt ::= argument_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // argument_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // argument_list ::= argument 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // argument_list ::= argument_list COMMA argument 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // argument ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // argument ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // argument ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argument ::= argument PLUS argument 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // name ::= simple_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // name ::= qualified_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_name ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_name",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // qualified_name ::= name DOT IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("qualified_name",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // return_statement ::= RETURN IDENT SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment ::= type IDENT ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_stmt ::= IF LPAR equality_expression RPAR stmt SEMI ELSE stmt SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // if_stmt ::= IF LPAR equality_expression RPAR stmt ELSE stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= new_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= num_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= method_invocation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // new_expression ::= NEW IDENT LPAR argument_list_opt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // equality_expression ::= expr GTEQ expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // equality_expression ::= expr NEQ expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // num_expr ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // num_expr ::= expr num_op expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // num_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // num_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // num_op ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
